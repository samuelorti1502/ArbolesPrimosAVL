/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import Clases.NumeroPrimo;
import Clases.Reloj;
import Clases.TextoDinamico;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Samuel David Ortiz
 */
public class FrmArbol extends javax.swing.JFrame {

    /**
     * Creates new form FrmArbol
     */
    private JLabel titulo;
    private ImageIcon Img;
    private Icon icono;
    private boolean continuar;

    String strRecorrido = "";

    Random rand;

    Reloj reloj = new Reloj();

    ArrayList<Integer> mylist = new ArrayList<Integer>();

    public volatile boolean continuarHilo = true;

    public FrmArbol() {
        this.continuar = true;
        initComponents();

        reloj.setLblReloj(lblReloj);
        reloj.start();

        lblReloj.setBackground(Color.black);
        lblReloj.setOpaque(true);

        txtConsola.append("Programa iniciado correctamente..." + System.lineSeparator());
        btnLimpiar.doClick();
        inicio();
    }

    private void inicio() {
        try {
            this.setLocationRelativeTo(null);

            // <editor-fold defaultstate="collapsed" desc="Texto dinamico">
            String mensaje = "¡ÁRBOLES BINARIOS Y NÚMEROS PRIMOS UMG!";
            TextoDinamico hilosTexto = new TextoDinamico(mensaje, 500, lblTexto, new JLabel());
            hilosTexto.start();
            // </editor-fold>  

            // <editor-fold defaultstate="collapsed" desc="Escudo UMG">
            titulo = new JLabel();
            titulo.setSize(140, 140);
            titulo.setLocation(5, 5);
            Img = new ImageIcon(getClass().getResource("/Images/umg.png"));
            icono = new ImageIcon(Img.getImage().getScaledInstance(140, 140,
                    Image.SCALE_DEFAULT));

            titulo.setIcon(icono);
            titulo.setVisible(true);
            pnlTitulo.add(titulo, 0);
            // </editor-fold> 

            //txtCantidad.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "FrmArboles(). " + e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlTitulo = new javax.swing.JPanel();
        jPanel = new javax.swing.JPanel();
        lblTexto = new javax.swing.JLabel();
        lblReloj = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        lblNumero = new javax.swing.JLabel();
        chkGuardarImagenes = new javax.swing.JCheckBox();
        txtS_S = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtConsola = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        txtValor = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        btnPreorden = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnInorden = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnPostorden = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton3 = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlTitulo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        pnlTitulo.setPreferredSize(new java.awt.Dimension(788, 160));

        lblTexto.setText("jLabel1");

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(lblTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        lblReloj.setBackground(new java.awt.Color(0, 0, 0));
        lblReloj.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblReloj.setForeground(new java.awt.Color(102, 255, 0));
        lblReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblReloj.setText("00:00:00");
        lblReloj.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout pnlTituloLayout = new javax.swing.GroupLayout(pnlTitulo);
        pnlTitulo.setLayout(pnlTituloLayout);
        pnlTituloLayout.setHorizontalGroup(
            pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTituloLayout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTituloLayout.createSequentialGroup()
                    .addContainerGap(618, Short.MAX_VALUE)
                    .addComponent(lblReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        pnlTituloLayout.setVerticalGroup(
            pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTituloLayout.createSequentialGroup()
                .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlTituloLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(95, Short.MAX_VALUE)))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Números primos:"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("¿Cuántos números primos desea generar?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jLabel2, gridBagConstraints);

        txtCantidad.setMaximumSize(new java.awt.Dimension(85, 29));
        txtCantidad.setMinimumSize(new java.awt.Dimension(85, 29));
        txtCantidad.setPreferredSize(new java.awt.Dimension(85, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(txtCantidad, gridBagConstraints);

        lblNumero.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNumero.setPreferredSize(new java.awt.Dimension(48, 250));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(lblNumero, gridBagConstraints);

        chkGuardarImagenes.setText("Guardar las imágenes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(chkGuardarImagenes, gridBagConstraints);

        txtS_S.setText("Start!");
        txtS_S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtS_SActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        jPanel1.add(txtS_S, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Árbol:"));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Consola:"));

        txtConsola.setColumns(20);
        txtConsola.setRows(5);
        jScrollPane3.setViewportView(txtConsola);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones:"));
        jPanel4.setLayout(new java.awt.GridLayout(7, 2, 15, 15));
        jPanel4.add(txtValor);
        jPanel4.add(jSeparator4);

        jButton1.setText("Agregar");
        jPanel4.add(jButton1);

        btnPreorden.setText("Preorden");
        btnPreorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreordenActionPerformed(evt);
            }
        });
        jPanel4.add(btnPreorden);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel4.add(btnBuscar);

        btnInorden.setText("Inorden");
        btnInorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInordenActionPerformed(evt);
            }
        });
        jPanel4.add(btnInorden);

        jButton2.setText("Buscar Pos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);

        btnPostorden.setText("Postorden");
        btnPostorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostordenActionPerformed(evt);
            }
        });
        jPanel4.add(btnPostorden);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel4.add(btnEliminar);
        jPanel4.add(jSeparator1);
        jPanel4.add(jSeparator2);

        jButton3.setText("Preguntas");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton3);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel4.add(btnLimpiar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlTitulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1047, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtS_SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtS_SActionPerformed
        if (txtS_S.getText().equals("Start!")) {
            txtS_S.setText("Stop!");
            continuarHilo = true;
        } else {
            txtS_S.setText("Start!");
            continuarHilo = false;
        }

        new Thread() {

            public void run() {
                //while(continuarHilo)
                long dateTimeStart = System.currentTimeMillis();
                {

                    try {
                        int cantidadPrimos = 0;
                        txtCantidad.setText(txtCantidad.getText().trim());

                        try {
                            cantidadPrimos = Integer.parseInt(txtCantidad.getText());
                        } catch (Exception e) {
                            throw new Exception("¡El valor ingresado (" + txtCantidad.getText() + ") no es un número!");
                        }

                        if (cantidadPrimos < 2) {
                            throw new Exception("¡Ingrese un valor mayor o igual que dos!");
                        }

                        int numero = 2;
                        int primosEncontrados = 0;

                        while (isContinuar() && continuarHilo) {
                            if (NumeroPrimo.EsPrimo(numero)) {

                                mylist.add(numero);
                                DibujarNumero(numero);
                                System.out.println(numero);
                                dibujarArbol(numero);
                                primosEncontrados++;
                                primosEncontrados++;
                            }

                            numero++;

                            /*Random random = new Random();

                            while (mylist.size() > 1) {
                                int randomIndex = random.nextInt(mylist.size());

                                jTree1.collapseRow(mylist.size());

                                //System.out.println("Not Repeated Random Number "+mylist.get(randomIndex));
                                DibujarNumero(mylist.get(randomIndex));
                                System.out.println(mylist.get(randomIndex));

                                dibujarArbol(mylist.get(randomIndex));
                                mylist.remove(randomIndex);
                            }*/
                            Thread.sleep(10);

                            if (primosEncontrados >= cantidadPrimos) {
                                setContinuar(false);
                            }
                        }

                        //System.out.println("mylist = " + mylist);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "txtS_SActionPerformed(). " + e.getMessage());
                    }
                }

                for (int i = 0; i < jTree1.getRowCount(); i++) {
                    //jTree1.collapseRow(i);
                    jTree1.expandRow(i);
                }
                long dateTimeEnd = System.currentTimeMillis();
                txtConsola.append("Se tardó: " + getDate((dateTimeEnd - dateTimeStart), "mm:ss:SSS") + " en generar el arbol\n");
                scrollDown();
            }

        }.start();
    }//GEN-LAST:event_txtS_SActionPerformed

    public int randomItem(ArrayList<Integer> mylist) {

        rand = new Random();

        Integer randomInt = mylist.get(rand.nextInt(mylist.size()));
        return randomInt;
    }

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        try {
            DefaultTreeModel modeloArbol = (DefaultTreeModel) jTree1.getModel();
            modeloArbol.setRoot(null);

            txtConsola.append("¡Vaciado del árbol! " + System.lineSeparator());
        } catch (Exception ex) {
            txtConsola.append("Error en btnLimpiarArbolActionPerformed(): " + ex.getMessage() + System.lineSeparator());
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        long dateTimeStart = System.currentTimeMillis();

        try {

            System.out.println("Inicio: " + getDate(dateTimeStart, "dd/MM/yyyy HH:mm:ss:SSS"));

            if (txtValor.getText().length() <= 0) {
                throw new Exception("¡Ingrese un valor!");
            }

            if (jTree1.getModel().getRoot() == null) {
                throw new Exception("¡El árbol está vacío!");
            }

            DefaultMutableTreeNode nodoEncontrado = null;
            DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();

            for (Enumeration e = nodoRaiz.depthFirstEnumeration(); e.hasMoreElements() && nodoEncontrado == null;) {
                DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) e.nextElement();
                if (txtValor.getText().equals(nodo.getUserObject().toString().split("-")[1].trim())) {
                    nodoEncontrado = nodo;
                }
            }

            if (nodoEncontrado == null) {
                txtConsola.append("¡Valor no encontrado!" + System.lineSeparator());
                return;
            }

            TreePath rutaNodo = new TreePath(nodoEncontrado.getPath());
            jTree1.setSelectionPath(rutaNodo);
            jTree1.expandPath(rutaNodo);

            long dateTimeEnd = System.currentTimeMillis();

            System.out.println("Fin: " + getDate(dateTimeEnd, "dd/MM/yyyy HH:mm:ss:SSS"));

            txtConsola.append("Se tardó: " + getDate((dateTimeEnd - dateTimeStart), "mm:ss:SSS\n"));

            txtConsola.append("Nodo buscado "
                    + nodoEncontrado.getUserObject().toString() + " en: " + rutaNodo.toString() + System.lineSeparator());

            txtConsola.append("Se realizaron " + rutaNodo.getPathCount() + " saltos para encontrar el numero " + nodoEncontrado.getUserObject().toString());

            scrollDown();

        } catch (Exception ex) {
            txtConsola.append("Error en btnBuscarActionPerformed(): " + ex.getMessage() + System.lineSeparator());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    public void scrollDown() {
        txtConsola.setCaretPosition(txtConsola.getText().length());
    }

    private void btnPreordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreordenActionPerformed
        try {
            if (jTree1.getModel().getRoot() == null) {
                throw new Exception("¡Ningún nodo en el árbol para recorrer!");
            }

            DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
            txtConsola.append("Recorrido PREORDEN: ");

            strRecorrido = "";
            RecorridoPreorden(nodoRaiz);
            txtConsola.append(strRecorrido.substring(0, strRecorrido.length() - 3) + "." + System.lineSeparator());
        } catch (Exception ex) {
            txtConsola.append("Error en btnPreordenActionPerformed(): " + ex.getMessage() + System.lineSeparator());
        }
    }//GEN-LAST:event_btnPreordenActionPerformed

    private void btnInordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInordenActionPerformed
        try {
            if (jTree1.getModel().getRoot() == null) {
                throw new Exception("¡Ningún nodo en el árbol para recorrer!");
            }

            DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
            txtConsola.append("Recorrido INORDEN: ");

            strRecorrido = "";
            RecorridoInorden(nodoRaiz);
            txtConsola.append(strRecorrido.substring(0, strRecorrido.length() - 3) + "." + System.lineSeparator());

        } catch (Exception ex) {
            txtConsola.append("Error en btnOrdenActionPerformed(): " + ex.getMessage() + System.lineSeparator());
        }
    }//GEN-LAST:event_btnInordenActionPerformed

    private void btnPostordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostordenActionPerformed
        try {
            if (jTree1.getModel().getRoot() == null) {
                throw new Exception("¡Ningún nodo en el árbol para recorrer!");
            }

            DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
            txtConsola.append("Recorrido POSTORDEN: ");

            strRecorrido = "";
            RecorridoPostorden(nodoRaiz);
            txtConsola.append(strRecorrido.substring(0, strRecorrido.length() - 3) + "." + System.lineSeparator());
        } catch (Exception ex) {
            txtConsola.append("Error en btnPostordenActionPerformed(): " + ex.getMessage() + System.lineSeparator());
        }
    }//GEN-LAST:event_btnPostordenActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        long dateTimeStart = System.currentTimeMillis();

        try {

            System.out.println("Inicio: " + getDate(dateTimeStart, "dd/MM/yyyy HH:mm:ss:SSS"));

            if (txtValor.getText().length() <= 0) {
                throw new Exception("¡Ingrese un valor!");
            }

            if (jTree1.getModel().getRoot() == null) {
                throw new Exception("¡El árbol está vacío!");
            }

                        
            System.out.println("nodo numero " + mylist.get(Integer.parseInt(txtValor.getText())));
            
            int myNode = mylist.get(Integer.parseInt(txtValor.getText()));
            
            DefaultMutableTreeNode nodoEncontrado = null;
            DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();

            for (Enumeration e = nodoRaiz.depthFirstEnumeration(); e.hasMoreElements() && nodoEncontrado == null;) {
                DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) e.nextElement();
                if (String.valueOf(myNode).equals(nodo.getUserObject().toString().split("-")[1].trim())) {
                    nodoEncontrado = nodo;
                }
            }

            if (nodoEncontrado == null) {
                txtConsola.append("¡Valor no encontrado!" + System.lineSeparator());
                return;
            }

            TreePath rutaNodo = new TreePath(nodoEncontrado.getPath());
            jTree1.setSelectionPath(rutaNodo);
            jTree1.expandPath(rutaNodo);

            long dateTimeEnd = System.currentTimeMillis();

            System.out.println("Fin: " + getDate(dateTimeEnd, "dd/MM/yyyy HH:mm:ss:SSS"));

            txtConsola.append("Se tardó: " + getDate((dateTimeEnd - dateTimeStart), "mm:ss:SSS\n"));

            txtConsola.append("Nodo buscado "
                    + nodoEncontrado.getUserObject().toString() + " en: " + rutaNodo.toString() + System.lineSeparator());

            txtConsola.append("Se realizaron " + rutaNodo.getPathCount() + " saltos para encontrar el numero " + nodoEncontrado.getUserObject().toString());

            scrollDown();

        } catch (Exception ex) {
            txtConsola.append("Error en btnBuscarActionPerformed(): " + ex.getMessage() + System.lineSeparator());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //new FrmPreguntas(mylist.get(0), mylist.get(mylist.size()-1), mylist.get(738), )).setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void DibujarNumero(int numero) {
        try {
            int width = this.lblNumero.getWidth();
            int height = this.lblNumero.getHeight();

            // Constructs a BufferedImage of one of the predefined image types.            
            BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

            // Create a graphics which can be used to draw into the buffered image
            Graphics2D g2d = bufferedImage.createGraphics();

            // fill all the image with white
            g2d.setColor(Color.black);
            g2d.fillRect(0, 0, width, height);

            Random r = new Random();
            Color color = new Color(r.nextInt(255), r.nextInt(255), r.nextInt(256), r.nextInt(255));
            g2d.setColor(color);

            int fontSize = (int) ((Math.random() * (100 - 48)) + 48);

            if (fontSize == 0) {
                fontSize = 10;
            }

            Font[] fuentes = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
            int indiceFuente = (int) Math.round(Math.random() * fuentes.length);

            if (indiceFuente == 0) {
                indiceFuente = 10;
            }

            Font font = new Font(fuentes[indiceFuente - 1].getFontName(), Font.PLAIN, fontSize);
            g2d.setFont(font);

            g2d.drawString("" + numero, 10, height);

            // Disposes of this graphics context and releases any system resources that it is using. 
            g2d.dispose();

            File file = new File("test.png");

            if (this.chkGuardarImagenes.isSelected()) {
                // Save as PNG
                file = new File(numero + ".png");
                ImageIO.write(bufferedImage, "png", file);
            }

            if (!this.chkGuardarImagenes.isSelected()) {
                // Save as PNG
                file = new File("imagen.png");
                ImageIO.write(bufferedImage, "png", file);
            }

            ImageIcon imageIcon = new ImageIcon(new ImageIcon(file.getAbsolutePath()).getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));
            this.lblNumero.setIcon(imageIcon);
            //System.out.println("Almacenado en: " + file.getAbsolutePath());
            // Save as JPEG
            //file = new File("myimage.jpg");
            //ImageIO.write(bufferedImage, "jpg", file);

            //JOptionPane.showMessageDialog(null, "Dibujando el: " + numero);            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "DibujarNumero(). " + e.getMessage());
        }
    }

    private void dibujarArbol(int numero) {

        int nodos = 1;
        long dateTimeStart = System.currentTimeMillis();

        try {
            jTree1.repaint();

            int valorNuevo = 0;
            try {
                valorNuevo = numero;
            } catch (Exception ex) {
                throw new Exception("¡Ingrese un entero!");
            }

            DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();

            if (nodoRaiz != null) {
                DefaultMutableTreeNode nodoAuxiliar = nodoRaiz;
                DefaultMutableTreeNode nodoPadre;

                while (true) {

                    nodoPadre = nodoAuxiliar;
                    String s = nodoAuxiliar.getUserObject().toString().split("-")[1].trim();
                    int valorNodoActual = Integer.parseInt(s);
                    if (valorNuevo < valorNodoActual) {
                        nodoAuxiliar = (DefaultMutableTreeNode) nodoAuxiliar.getFirstChild();

                        if (nodoAuxiliar.getUserObject().toString().equals("I - NULL")) {

                            nodoAuxiliar.setUserObject("I - " + valorNuevo);
                            nodoAuxiliar.add(new DefaultMutableTreeNode("I - NULL"));
                            nodoAuxiliar.add(new DefaultMutableTreeNode("D - NULL"));

                            jTree1.expandPath(new TreePath(nodoAuxiliar.getPath()));
                            txtConsola.append("Nodo agregado: " + numero + System.lineSeparator());

                            return;
                        }
                    } else {
                        nodoAuxiliar = (DefaultMutableTreeNode) nodoAuxiliar.getLastChild();

                        if (nodoAuxiliar.getUserObject().toString().equals("D - NULL")) {

                            nodoAuxiliar.setUserObject("D - " + valorNuevo);
                            nodoAuxiliar.add(new DefaultMutableTreeNode("I - NULL"));
                            nodoAuxiliar.add(new DefaultMutableTreeNode("D - NULL"));

                            jTree1.expandPath(new TreePath(nodoAuxiliar.getPath()));
                            //txtConsola.append("Nuevo nodo agregado: " + numero + System.lineSeparator());
                            txtConsola.append("Nodo agregado: " + numero + System.lineSeparator());
                            scrollDown();

                            return;
                        }
                    }
                }
            } else {

                nodoRaiz = new DefaultMutableTreeNode("R - " + numero);
                DefaultMutableTreeNode nodoIzquierdo = new DefaultMutableTreeNode("I - NULL");
                DefaultMutableTreeNode nodoDerecho = new DefaultMutableTreeNode("D - NULL");

                nodoRaiz.add(nodoIzquierdo);
                nodoRaiz.add(nodoDerecho);

                DefaultTreeModel modeloArbol = (DefaultTreeModel) jTree1.getModel();
                modeloArbol.reload();
                modeloArbol.setRoot(nodoRaiz);

                txtConsola.append("Nodo RAÍZ agregado: " + numero + System.lineSeparator());

                scrollDown();

            }
        } catch (Exception ex) {
            txtConsola.append("Error en btnAgregarActionPerformed(): " + ex.getMessage() + System.lineSeparator());
        }

        long dateTimeEnd = System.currentTimeMillis();
        //txtConsola.append("Se tardó: " + getDate((dateTimeEnd - dateTimeStart), "mm:ss:SSS") + " en generar el arbol\n");

    }

    public void RecorridoPreorden(DefaultMutableTreeNode nodoRaiz) {
        if (!nodoRaiz.getUserObject().toString().equals("I - NULL") && !nodoRaiz.getUserObject().toString().equals("D - NULL")) {
            strRecorrido += nodoRaiz.getUserObject().toString().split("-")[1].trim() + " - ";
            RecorridoPreorden((DefaultMutableTreeNode) nodoRaiz.getFirstChild());
            RecorridoPreorden((DefaultMutableTreeNode) nodoRaiz.getLastChild());
        }
    }

    public void RecorridoInorden(DefaultMutableTreeNode nodoRaiz) {
        if (!nodoRaiz.getUserObject().toString().equals("I - NULL") && !nodoRaiz.getUserObject().toString().equals("D - NULL")) {
            RecorridoInorden((DefaultMutableTreeNode) nodoRaiz.getFirstChild());
            strRecorrido += nodoRaiz.getUserObject().toString().split("-")[1].trim() + " - ";
            RecorridoInorden((DefaultMutableTreeNode) nodoRaiz.getLastChild());
        }
    }

    public void RecorridoPostorden(DefaultMutableTreeNode nodoRaiz) {
        if (!nodoRaiz.getUserObject().toString().equals("I - NULL") && !nodoRaiz.getUserObject().toString().equals("D - NULL")) {
            RecorridoPostorden((DefaultMutableTreeNode) nodoRaiz.getFirstChild());
            RecorridoPostorden((DefaultMutableTreeNode) nodoRaiz.getLastChild());
            strRecorrido += nodoRaiz.getUserObject().toString().split("-")[1].trim() + " - ";
        }
    }

    public void diferencia() {

    }

    public static String getDate(long milliseconds, String format) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        return sdf.format(milliseconds);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmArbol.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmArbol.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmArbol.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmArbol.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmArbol().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInorden;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnPostorden;
    private javax.swing.JButton btnPreorden;
    private javax.swing.JCheckBox chkGuardarImagenes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel lblNumero;
    private javax.swing.JLabel lblReloj;
    private javax.swing.JLabel lblTexto;
    private javax.swing.JPanel pnlTitulo;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextArea txtConsola;
    private javax.swing.JButton txtS_S;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the continuar
     */
    public boolean isContinuar() {
        return continuar;
    }

    /**
     * @param continuar the continuar to set
     */
    public void setContinuar(boolean continuar) {
        this.continuar = continuar;
    }
}
